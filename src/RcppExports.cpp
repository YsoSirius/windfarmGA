// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// wake
double wake(double Rotorf, double wakr, double leA);
RcppExport SEXP _windfarmGA_wake(SEXP RotorfSEXP, SEXP wakrSEXP, SEXP leASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rotorf(RotorfSEXP);
    Rcpp::traits::input_parameter< double >::type wakr(wakrSEXP);
    Rcpp::traits::input_parameter< double >::type leA(leASEXP);
    rcpp_result_gen = Rcpp::wrap(wake(Rotorf, wakr, leA));
    return rcpp_result_gen;
END_RCPP
}
// wakeRcpp
double wakeRcpp(double lenght_b, bool topograp, double RotD, double k);
RcppExport SEXP _windfarmGA_wakeRcpp(SEXP lenght_bSEXP, SEXP topograpSEXP, SEXP RotDSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lenght_b(lenght_bSEXP);
    Rcpp::traits::input_parameter< bool >::type topograp(topograpSEXP);
    Rcpp::traits::input_parameter< double >::type RotD(RotDSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(wakeRcpp(lenght_b, topograp, RotD, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_windfarmGA_wake", (DL_FUNC) &_windfarmGA_wake, 3},
    {"_windfarmGA_wakeRcpp", (DL_FUNC) &_windfarmGA_wakeRcpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_windfarmGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
