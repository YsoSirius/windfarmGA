// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// wake_CPP
double wake_CPP(double Rotorf, double wakr, double leA);
RcppExport SEXP _windfarmGA_wake_CPP(SEXP RotorfSEXP, SEXP wakrSEXP, SEXP leASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Rotorf(RotorfSEXP);
    Rcpp::traits::input_parameter< double >::type wakr(wakrSEXP);
    Rcpp::traits::input_parameter< double >::type leA(leASEXP);
    rcpp_result_gen = Rcpp::wrap(wake_CPP(Rotorf, wakr, leA));
    return rcpp_result_gen;
END_RCPP
}
// rotate_CPP
NumericMatrix rotate_CPP(NumericVector X1, NumericVector Y1, double Px, double Py, float angle);
RcppExport SEXP _windfarmGA_rotate_CPP(SEXP X1SEXP, SEXP Y1SEXP, SEXP PxSEXP, SEXP PySEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y1(Y1SEXP);
    Rcpp::traits::input_parameter< double >::type Px(PxSEXP);
    Rcpp::traits::input_parameter< double >::type Py(PySEXP);
    Rcpp::traits::input_parameter< float >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate_CPP(X1, Y1, Px, Py, angle));
    return rcpp_result_gen;
END_RCPP
}
// angles_CPP
NumericVector angles_CPP(NumericVector Aa, NumericVector Bb, NumericVector Cc);
RcppExport SEXP _windfarmGA_angles_CPP(SEXP AaSEXP, SEXP BbSEXP, SEXP CcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Aa(AaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Bb(BbSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Cc(CcSEXP);
    rcpp_result_gen = Rcpp::wrap(angles_CPP(Aa, Bb, Cc));
    return rcpp_result_gen;
END_RCPP
}
// energy_calc_CPP
double energy_calc_CPP(NumericVector wind_speed, NumericVector rotor_radius, NumericVector air_rh);
RcppExport SEXP _windfarmGA_energy_calc_CPP(SEXP wind_speedSEXP, SEXP rotor_radiusSEXP, SEXP air_rhSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type wind_speed(wind_speedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rotor_radius(rotor_radiusSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type air_rh(air_rhSEXP);
    rcpp_result_gen = Rcpp::wrap(energy_calc_CPP(wind_speed, rotor_radius, air_rh));
    return rcpp_result_gen;
END_RCPP
}
// euc_CPP
float euc_CPP(float x1, float x2, float y1, float y2);
RcppExport SEXP _windfarmGA_euc_CPP(SEXP x1SEXP, SEXP x2SEXP, SEXP y1SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< float >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< float >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< float >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(euc_CPP(x1, x2, y1, y2));
    return rcpp_result_gen;
END_RCPP
}
// point_2_line_CPP
NumericVector point_2_line_CPP(NumericVector x, NumericVector y);
RcppExport SEXP _windfarmGA_point_2_line_CPP(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(point_2_line_CPP(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_windfarmGA_wake_CPP", (DL_FUNC) &_windfarmGA_wake_CPP, 3},
    {"_windfarmGA_rotate_CPP", (DL_FUNC) &_windfarmGA_rotate_CPP, 5},
    {"_windfarmGA_angles_CPP", (DL_FUNC) &_windfarmGA_angles_CPP, 3},
    {"_windfarmGA_energy_calc_CPP", (DL_FUNC) &_windfarmGA_energy_calc_CPP, 3},
    {"_windfarmGA_euc_CPP", (DL_FUNC) &_windfarmGA_euc_CPP, 4},
    {"_windfarmGA_point_2_line_CPP", (DL_FUNC) &_windfarmGA_point_2_line_CPP, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_windfarmGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
